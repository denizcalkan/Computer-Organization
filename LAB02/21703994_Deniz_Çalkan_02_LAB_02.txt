#CS224
#Lab NO: 02
#Section: 02
#Name: Deniz Çalkan
#Id: 21703994


# A program that complements n number of rightmost bits of an input register


.data


        message1: .asciiz "Enter a number to be complemented: "
        message2: .asciiz "Enter the value of n (n number of rightmost bits): "
        message3: .asciiz "\nYour input in hex format: "
        message4: .asciiz "\nYour input's complement in hex format: "
        message5: .asciiz "\nEnter 0 to stop or another number to be complemented: "








.text
        main:
                #Print message1
                 li $v0, 4
                la $a0, message1
                syscall
                
                #Get users response for message1
                li $v0, 5
                syscall


                #Store the response in $a1 (number to be complemented)
                move $a1, $v0
                
                 #Print message2
                 li $v0, 4
                la $a0, message2
                syscall
                
                #Get users response for message2
                li $v0, 5
                syscall
                
                #Store the response in $a2 (n number of rightmost bits)
                move $a2, $v0
                
                jal bitComplementor
                
                 #Print message3
                 li $v0, 4
                la $a0, message3
                syscall
                
                #Print number in hex 
                move $a0, $a1
                 li $v0, 34
                syscall
                
                 #Print message4
                 li $v0, 4
                la $a0, message4
                syscall
                
                #Print complemented number in hex
                move $a0, $v1
                 li $v0, 34
                syscall
                
                again: 
                        #Print message5
                         li $v0, 4
                        la $a0, message5
                        syscall
                        
                        #Get users response for message5
                        li $v0, 5
                        syscall
                
                        #Store the response in $a3 (n number of rightmost bits)
                        move $a1, $v0
                        
                        beq, $zero, $a1, end
                        
                        #Print message2
                         li $v0, 4
                        la $a0, message2
                        syscall
                
                        #Get users response for message2
                        li $v0, 5
                        syscall
                
                        #Store the response in $a2 (n number of rightmost bits)
                        move $a2, $v0
                        
                        jal bitComplementor
                        
                        #Print message3
                         li $v0, 4
                        la $a0, message3
                        syscall
                
                        #Print number in hex 
                        move $a0, $a1
                         li $v0, 34
                        syscall
                        
                         #Print message4
                         li $v0, 4
                        la $a0, message4
                        syscall
                        
                        #Print complemented number in hex
                        move $a0, $v1
                         li $v0, 34
                        syscall
                        
                        #If user enters 0 end program
                        bne, $zero, $a1, again
                
                end:
                        li $v0, 10
                        syscall


li $v0, 10
syscall




bitComplementor:


        #Creating a control register
        addi $sp, $sp, -4
        sw $s0, 0($sp)
        
        #Store all 1's
        li $s0, -1


                shift: 
                        #shifting left  n times
                        sll $s0, $s0, 1
                        subi  $a2, $a2, 1
                        bne , $a2, 0, shift 
                        beq , $a2, 0, convertBits
                
        convertBits:
                #XNOR operation gives the opposite of B when A is 0 and gives B when A is 1.
                # A = $s0, B = $a1        
                xor $v0, $a1, $s0 
                not $v1, $v0
                
        lw $s0, 0($sp)
        addi $sp, $sp, 4        


jr $ra        




                
####################################################################


#Program that performs array operations




.data
        message1: .asciiz "Enter the array size: "
        message2: .asciiz "Enter an item: "
        message3: .asciiz "\nEnter 0 to stop or another number for new array size: "
        message4: .asciiz "\nThe array is a palindrome! "
        message5: .asciiz "\nThe array is NOT a palindrome! "
        message6: .asciiz "\nHere is your array: "
        message7: .asciiz "\nNumber of occurrences of an array element value, whose index is "
        message8: .asciiz " equals to "








.text
        main:
                #To invoke the subprogram countFrequency($a2 can modified from here)
                li $a2, 2
                
                #Print message1
                 li $v0, 4
                la $a0, message1
                syscall


                #Get users response for message1 (array size)
                li $v0, 5
                syscall
                
                #Store the response in $a1 (array size)
                move $a1, $v0
                
                #After getting the size go to subprogram to get the items from the user and create the array
                jal createPopulateArray
                
                #Check whether the array is a palindrome or not in the subprogram
                jal checkPalindrome
                
                #Count the number of occurrences of an array element value, whose index is given in $a2, in the array in the subprogram.
                jal countFrequency
                
                #Call all subprograms as long as user wants to continue
                again:
                        #Print message3
                         li $v0, 4
                        la $a0, message3
                        syscall
                
                        #Get users response for message3
                        li $v0, 5
                        syscall
                
                        #Store the response in $a1 (array size)
                        move $a1, $v0
                        
                        #If user enters 0 end program
                        beq $a1, $zero, end
                        
                        jal createPopulateArray
                
                        jal checkPalindrome
                
                        jal countFrequency
                        
                        bne $a1, $zero, again
                        
                        
                end:
                        li $v0, 10
                        syscall


li $v0, 10
syscall


createPopulateArray:
        
        addi $sp, $sp, -24
        sw $s0, 20($sp)
        sw $s1, 16($sp)
        sw $s2, 12($sp)
        sw $s3, 8($sp)
        sw $s4, 4($sp)
        sw $s5, 0($sp)
        
        #Creating a space = array size * 4 
        addi $s4, $s4, 4
        mult $a1, $s4
        mflo $s4
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s0 holds the beginning address of the array
        move $s0, $v0
            #$s3 also holds the beginning address of the array
           move $s3, $s0
           #$s1 holds the array size
        move $s1, $a1
            #$s2 also holds the array size        
        move $s2, $a1
        
        #Ask user to enter items then store them in the array
        while:  beq  $s1, $zero, endi
                
                        #Print message2
                         li $v0, 4
                        la $a0, message2
                        syscall
                
                        #Get users response for message2
                        li $v0, 5
                        syscall
                
                        sw $v0, 0($s0)
                        addi $s0, $s0, 4
                        subi $s1, $s1, 1
        j while
        
        endi:
                subi $s0, $s0, 4
                
                #Store the address of the last item in $v1 ( wil be used in other subprogram)
                move $v1, $s0
                
                #Print message6
                 li $v0, 4
                la $a0, message6
                syscall
        
        #Print array        
        print: beq $s2, $zero, stop
                
                lw $s5, 0($s3)
                li $v0, 1
                move $a0, $s5
                syscall
                addi $s3, $s3, 4
                subi $s2, $s2, 1
        j print 
        
        stop:
                
        lw $s5, 0($sp)
        lw $s4, 4($sp)
        lw $s3, 8($sp)
        lw $s2, 12($sp)
        lw $s1, 16($sp)
        lw $s0, 20($sp)
        addi $sp, $sp, 24


jr $ra




checkPalindrome:


        addi $sp, $sp, -28
        sw $s0, 24($sp)
        sw $s1, 20($sp)
        sw $s2, 16($sp)
        sw $s3, 12($sp)
        sw $s4, 8($sp)
        sw $s5, 4($sp)
        sw $s6, 0($sp)
        
        #Creating a space = array size * 4 
        addi $s4, $s4, 4
        mult $a1, $s4
        mflo $s4
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s0 holds the beginning address of the array (not the original array)
        move $s0, $v0
        #$s1 holds the address of the last item in the array
        move $s1, $v1
        #$s2 holds the array size
        move $s2, $a1
        
        #Filling a new array reversely with the contents of the original array
        reverseArray: beq $s2, $zero, done
                        
                        lw $s3, 0($s1)
                        sw $s3, 0($s0)
                
                        #Decrement $s1 by 4 so that it points to the previous index
                        addi $s1, $s1, -4
                        
                        #Increment $s0 by 4 so that it points to the next index
                        addi $s0, $s0, 4
                        
                        #Increment $s2 by 1 
                        subi $s2, $s2, 1
                        
        j reverseArray
        
        done:        
                #$s0 holds the beginning address of the reversed array
                move $s0, $v0
                addi $s1, $s1, 4
                #$s6 holds the beginning address of the original array
                move $s6, $s1 
                move $s2, $a1
        
        
        compareArrays: beq $s2, $zero, endc
                
                lw  $s4, 0($s0)
                lw  $s5, 0($s1)
                        
                bne  $s4, $s5, isNotPalindrome
                        
                #Increment  $s0 by 4 so that it points to the next index
                addi $s0, $s0, 4
                
                #Increment  $s1 by 4 so that it points to the next index
                addi $s1, $s1, 4
                        
                #Increment $s2 by 1 
                subi $s2, $s2, 1
        
        j compareArrays
                
         endc:
                
                isPalindrome:
                        #Print message4
                        li $v0, 4
                        la $a0, message4
                        syscall
                        #$a0 holds the beginning address of the array
                        move $a0, $s6
                        
                        lw $s6, 0($sp)
                        lw $s5, 4($sp)
                        lw $s4, 8($sp)
                        lw $s3, 12($sp)
                        lw $s2, 16($sp)
                        lw $s1, 20($sp)
                        lw $s0, 24($sp)
                        addi $sp, $sp, 28        
                        
                        jr $ra
                
                
                isNotPalindrome:
                        #Print message5
                        li $v0, 4
                        la $a0, message5
                        syscall
                        #$a0 holds the beginning address of the array
                        move $a0, $s6
                        
                        lw $s6, 0($sp)
                        lw $s5, 4($sp)
                        lw $s4, 8($sp)
                        lw $s3, 12($sp)
                        lw $s2, 16($sp)
                        lw $s1, 20($sp)
                        lw $s0, 24($sp)
                        addi $sp, $sp, 28
                        
                        jr $ra
jr $ra




countFrequency:


        addi $sp, $sp, -28
        sw $s0, 24($sp)
        sw $s1, 20($sp)
        sw $s2, 16($sp)
        sw $s3, 12($sp)
        sw $s4, 8($sp)
        sw $s5, 4($sp)
        sw $s6, 0($sp)
        
        #$s0 holds the beginning address of the array
        move $s0, $a0
        #$s4 holds the beginning address of the array
        move $s4, $a0
        #$s1 holds the index
        add $s1, $s1, $a2
        #$s6 holds the array size
        move $s6, $a1
        
        #Find the value at index $a2 and store it in $s2
        findValueAtIndex: beq $s3, $s1, endf
                          addi $s0, $s0, 4
                          addi $s3, $s3, 1
        j findValueAtIndex
        
        endf:
                lw $s2, 0($s0)
                addi $s3, $zero, 0
                addi $s0, $zero, 0
                
        #Count frequency        
        count:  beq $s5, $s6, endco
                lw $s3, 0($s4)
                beq $s3, $s2, addCounter
                addi $s5, $s5, 1
                addi $s4, $s4, 4
                
        j count
        
        addCounter:
                addi $s0, $s0, 1
                addi $s5, $s5, 1
                addi $s4, $s4, 4
                bne $s5, $s6, count
        
                
        endco:
                
                #Print message7
                 li $v0, 4
                la $a0, message7
                syscall
                
                #Print index
                li $v0, 1
                move $a0, $s1
                syscall
                
                #Print message8
                 li $v0, 4
                la $a0, message8
                syscall
                
                #Print frequency
                li $v0, 1
                move $a0, $s0
                syscall
        
                lw $s6, 0($sp)
                lw $s5, 4($sp)
                lw $s4, 8($sp)
                lw $s3, 12($sp)
                lw $s2, 16($sp)
                lw $s1, 20($sp)
                lw $s0, 24($sp)
                addi $sp, $sp, 28
        
jr $ra






#########################################################
#Program that deletes a number from the array given by the user.


.data
        message1: .asciiz "Enter the array size: "
        message2: .asciiz "Enter an item: "
        message3: .asciiz "\nEnter 0 to stop or another number for new array size: "
        message4: .asciiz "Number of occurrences of number "
        message5: .asciiz " in the array equals to "
        message6: .asciiz "Here is your array: "
        message7: .asciiz "\nHere is the compressed array: "
        message8: .asciiz "\nEnter the number you want to delete: "
        


.text
        main:
                
                #Print message1
                 li $v0, 4
                la $a0, message1
                syscall


                #Get users response for message1 (array size)
                li $v0, 5
                syscall
                
                #Store the response in $a1 (array size)
                move $a1, $v0
                
                #After getting the size go to subprogram to get the items from the user and create the array
                jal createPopulateArray
                move $t6, $a0
                
                #Print message8
                 li $v0, 4
                la $a0, message8
                syscall


                #Get users response for message8 
                li $v0, 5
                syscall
                
                #Store the response in $a2 
                move $a2, $v0
                
                move $a0, $t6
                
                jal compressArray
                
                move $t0, $v0
                move $t1, $v1
                
                print2: beq $t1, $zero, stop2
                
                lw $t3, 0($t0)
                li $v0, 1
                move $a0, $t3
                syscall
                
                addi $t0, $t0, 4
                subi $t1, $t1, 1
        j print2 
        
        stop2:
                
                #Call all subprograms as long as user wants to continue
                again:
                        
                        #Print message3
                         li $v0, 4
                        la $a0, message3
                        syscall
                
                        #Get users response for message3
                        li $v0, 5
                        syscall
                
                        #Store the response in $a1 (array size)
                        move $a1, $v0
                        
                        #If user enters 0 end program
                        beq $a1, $zero, end
                        
                        jal createPopulateArray
                        move $t5, $a0
                
                        #Print message8
                         li $v0, 4
                        la $a0, message8
                        syscall


                        #Get users response for message8 
                        li $v0, 5
                        syscall
                
                        #Store the response in $a2 
                        move $a2, $v0
                
                        move $a0, $t5
                        
                        jal compressArray
                        
                        move $t0, $v0
                        move $t1, $v1
                
                        print3: beq $t1, $zero, stop3
                
                               lw $t3, 0($t0)
                               li $v0, 1
                                move $a0, $t3
                                syscall
                
                               addi $t0, $t0, 4
                                subi $t1, $t1, 1
                      j print3 
        
                       stop3:
                        
                        bne $a1, $zero, again
                        
                end:
                        li $v0, 10
                        syscall


li $v0, 10
syscall
                
                        
createPopulateArray:
        
                
        addi $sp, $sp, -24
        sw $s0, 24($sp)
        sw $s1, 20($sp)
        sw $s2, 16($sp)
        sw $s3, 12($sp)
        sw $s4, 8($sp)
        sw $s5, 4($sp)
        sw $s6, 0($sp)
        
        #Creating a space = array size * 4 
        addi $s4, $s4, 4
        mult $a1, $s4
        mflo $s4
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s0 holds the beginning address of the array
        move $s0, $v0
        #$s3 also holds the beginning address of the array
           move $s3, $s0
           #$s6 also holds the beginning address of the array
           move $s6, $s0
           #$s1 holds the array size
        move $s1, $a1
        #$s2 also holds the array size        
        move $s2, $a1
        
        #Ask user to enter items then store them in the array
        while:  beq  $s1, $zero, endi
                
                        #Print message2
                         li $v0, 4
                        la $a0, message2
                        syscall
                
                        #Get users response for message2
                        li $v0, 5
                        syscall
                
                        sw $v0, 0($s0)
                        addi $s0, $s0, 4
                        subi $s1, $s1, 1
        j while
        
        endi:
                subi $s0, $s0, 4
                
                #Store the address of the last item in $v1 ( wil be used in other subprogram)
                move $v1, $s0
                
                #Print message6
                 li $v0, 4
                la $a0, message6
                syscall
        
        #Print array        
        print1: beq $s2, $zero, stop1
                
                lw $s5, 0($s3)
                li $v0, 1
                move $a0, $s5
                syscall
                addi $s3, $s3, 4
                subi $s2, $s2, 1
        j print1 
        
        stop1:
                #$a0 holds the beginning address of the array
                move $a0, $s6
                
                lw $s6, 0($sp)
                lw $s5, 4($sp)
                lw $s4, 8($sp)
                lw $s3, 12($sp)
                lw $s2, 16($sp)
                lw $s1, 20($sp)
                lw $s0, 24($sp)
                addi $sp, $sp, 24        


jr $ra




compressArray:


        addi $sp, $sp, -32
        sw $s0, 28($sp)
        sw $s1, 24($sp)
        sw $s2, 20($sp)
        sw $s3, 16($sp)
        sw $s4, 12($sp)
        sw $s5, 8($sp)
        sw $s6, 4($sp)
        sw $s7, 0($sp)




        move $s0, $a0
        move $s1, $a1
        move $s2, $a2
        
        
        #Count frequency        
        count:  beq $s3, $s1, endco
                lw $s4, 0($s0)
                beq $s4, $s2, addCounter
                addi $s3, $s3, 1
                addi $s0, $s0, 4
                
        j count
        
        addCounter:
                addi $s5, $s5, 1
                addi $s3, $s3, 1
                addi $s0, $s0, 4
                bne $s5, $s6, count
        
        endco:


        addi $s3, $zero, 0
        #$s3 holds the compressed arrays size
        sub $s3, $s1, $s5
        move $v1, $s3
        move $s1, $s5
        move $s3, $a1
        
        addi $s4, $zero, 0
        addi $s5, $zero, 0
        move $s0, $a0
        
        addi $s4, $s4, 4
        mult $s3, $s4
        mflo $s4
        
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s4 holds the beginning address of the compressed array (not the original array)
        move $s4, $v0
        move $s7, $v0
        
        
        fill: beq $s5, $s3, endf
              lw $s6, 0($s0)
              bne $s6, $s2, addItem
              addi $s5, $s5, 1
              addi $s0, $s0, 4
        j fill
        
        addItem:
                sw $s6, 0($s4)
                addi $s4, $s4, 4
                addi $s5, $s5, 1
                      addi $s0, $s0, 4
                      bne $s5, $s3, fill
         endf: 
         
                 #Print message4
                 li $v0, 4
                la $a0, message4
                syscall
                
                #Print index
                li $v0, 1
                move $a0, $a2
                syscall
                
                #Print message5
                 li $v0, 4
                la $a0, message5
                syscall
                
                #Print index
                li $v0, 1
                move $a0, $s1
                syscall
                
                #Print message7
                 li $v0, 4
                la $a0, message7
                syscall
                
                move $v0, $s7
                
        
        lw $s7, 0($sp)
        lw $s6, 4($sp)
        lw $s5, 8($sp)
        lw $s4, 12($sp)
        lw $s3, 16($sp)
        lw $s2, 20($sp)
        lw $s1, 24($sp)
        lw $s0, 28($sp)
        addi $sp, $sp, 32        


jr $ra


                                
                
############################################################


#Program that compresses array by given range by the user        


.data
        message1: .asciiz "Enter the array size: "
        message2: .asciiz "Enter an item: "
        message3: .asciiz "\nEnter 0 to stop or another number for new array size: "
        message4: .asciiz "\nNumber of occurrences of number "
        message5: .asciiz " in the array equals to "
        message6: .asciiz "Here is your array: "
        message7: .asciiz "Here is the compressed array: "
        message8: .asciiz "\nPlease enter the range you want to compress"
        message9: .asciiz "\nEnter beginning of the range: "
        message10: .asciiz "Enter end of the range: "


.text
        main:
                
                #Print message1
                 li $v0, 4
                la $a0, message1
                syscall


                #Get users response for message1 (array size)
                li $v0, 5
                syscall
                
                #Store the response in $a1 (array size)
                move $a1, $v0
                
                #After getting the size go to subprogram to get the items from the user and create the array
                jal createPopulateArray
                
                jal compressMultiple
                
                move $t3, $v0
                move $t4, $v1
                
                #Print message7
                li $v0, 4
                la $a0, message7
                syscall
                        
                print2: beq $t4, $zero, stop2
                
                             lw $t5, 0($t3)
                             li $v0, 1
                                move $a0, $t5
                                syscall
                
                                subi $t4, $t4, 1
                                addi $t3, $t3, 4
                      j print2
        
                       stop2:
                
                
                #Call all subprograms as long as user wants to continue
                again:
                        #Print message3
                         li $v0, 4
                        la $a0, message3
                        syscall
                
                        #Get users response for message3
                        li $v0, 5
                        syscall
                
                        #Store the response in $a1 (array size)
                        move $a1, $v0
                        
                        #If user enters 0 end program
                        beq $a1, $zero, end
                        
                        jal createPopulateArray
                        
                        jal compressMultiple
                        
                        move $t3, $v0
                move $t4, $v1
                
                #Print message7
                li $v0, 4
                la $a0, message7
                syscall
                        
                print3: beq $t4, $zero, stop3
                
                                lw $t5, 0($t3)
                                li $v0, 1
                                move $a0, $t5
                                syscall
                
                                subi $t4, $t4, 1
                                addi $t3, $t3, 4
                      j print3 
        
                       stop3:
                        
                        bne $a1, $zero, again
                        
                end:
                        li $v0, 10
                        syscall


li $v0, 10
syscall
                
                
createPopulateArray:
        
        addi $sp, $sp, -24
        sw $s0, 24($sp)
        sw $s1, 20($sp)
        sw $s2, 16($sp)
        sw $s3, 12($sp)
        sw $s4, 8($sp)
        sw $s5, 4($sp)
        sw $s6, 0($sp)
        
        #Creating a space = array size * 4 
        addi $s4, $s4, 4
        mult $a1, $s4
        mflo $s4
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s0 holds the beginning address of the array
        move $s0, $v0
            #$s3 also holds the beginning address of the array
           move $s3, $s0
           #$s6 also holds the beginning address of the array
           move $s6, $s0
           #$s1 holds the array size
        move $s1, $a1
           #$s2 also holds the array size        
        move $s2, $a1
        
        #Ask user to enter items then store them in the array
        while:  beq  $s1, $zero, endi
                
                        #Print message2
                         li $v0, 4
                        la $a0, message2
                        syscall
                
                        #Get users response for message2
                        li $v0, 5
                        syscall
                
                        sw $v0, 0($s0)
                        addi $s0, $s0, 4
                        subi $s1, $s1, 1
        j while
        
        endi:
                subi $s0, $s0, 4
                
                #Store the address of the last item in $v1 ( wil be used in other subprogram)
                move $v1, $s0
                
                #Print message6
                 li $v0, 4
                la $a0, message6
                syscall
        
        #Print array        
        print1: beq $s2, $zero, stop1
                
                lw $s5, 0($s3)
                li $v0, 1
                move $a0, $s5
                syscall
                addi $s3, $s3, 4
                subi $s2, $s2, 1
        j print1 
        
        stop1:
                #$a0 holds the beginning address of the array
                move $a0, $s6
                
                lw $s6, 0($sp)
                lw $s5, 4($sp)
                lw $s4, 8($sp)
                lw $s3, 12($sp)
                lw $s2, 16($sp)
                lw $s1, 20($sp)
                lw $s0, 24($sp)
                addi $sp, $sp, 24        


jr $ra




compressArray:


        addi $sp, $sp, -32
        sw $s0, 28($sp)
        sw $s1, 24($sp)
        sw $s2, 20($sp)
        sw $s3, 16($sp)
        sw $s4, 12($sp)
        sw $s5, 8($sp)
        sw $s6, 4($sp)
        sw $s7, 0($sp)




        move $s0, $a0
        move $s1, $a1
        move $s2, $a2
        addi $s3, $zero, 0
        addi $s4, $zero, 0
        addi $s5, $zero, 0
        addi $s6, $zero, 0
        addi $s7, $zero, 0
        
        
        #Count frequency        
        count:  beq $s3, $s1, endco
                lw $s4, 0($s0)
                beq $s4, $s2, addCounter
                addi $s3, $s3, 1
                addi $s0, $s0, 4
                
        j count
        
        addCounter:
                addi $s5, $s5, 1
                addi $s3, $s3, 1
                addi $s0, $s0, 4
                bne $s5, $s6, count
        
                
        endco:


        addi $s3, $zero, 0
        #$s3 holds the compressed arrays size
        sub $s3, $s1, $s5
        move $v1, $s3
        move $s1, $s5
        move $s3, $a1
        
        addi $s4, $zero, 0
        addi $s5, $zero, 0
        move $s0, $a0
        
        addi $s4, $s4, 4
        mult $s3, $s4
        mflo $s4
        
        
        #Dynamic array allocation
        move $a0, $s4
        li $v0, 9                 
        syscall
        
        #$s4 holds the beginning address of the compressed array (not the original array)
        move $s4, $v0
        move $s7, $v0
        
        
        fill: beq $s5, $s3, endf
              lw $s6, 0($s0)
              bne $s6, $s2, addItem
              addi $s5, $s5, 1
              addi $s0, $s0, 4
        j fill
        
        addItem:
                sw $s6, 0($s4)
                addi $s4, $s4, 4
                addi $s5, $s5, 1
                      addi $s0, $s0, 4
                      bne $s5, $s3, fill
         endf: 
         
                move $v0, $s7
        
        lw $s7, 0($sp)
        lw $s6, 4($sp)
        lw $s5, 8($sp)
        lw $s4, 12($sp)
        lw $s3, 16($sp)
        lw $s2, 20($sp)
        lw $s1, 24($sp)
        lw $s0, 28($sp)
        addi $sp, $sp, 32        


jr $ra


compressMultiple:


addi $sp, $sp, -8
sw $s5, 4($sp)
sw $s6, 0($sp)


#Storing the address where the subprogram should go back after done executing
move $s5, $ra
move $s6, $a0


#Print message8
        li $v0, 4
        la $a0, message8
        syscall
        
        #Print message9
        li $v0, 4
        la $a0, message9
        syscall
        
        li $v0, 5
        syscall
                
        move $a2, $v0
        
        #Print message10
        li $v0, 4
        la $a0, message10
        syscall
        
        li $v0, 5
        syscall
        
        move $a3, $v0
        
        compress: bgt $a2, $a3, endcomp
                
                move $a0,$s6
                jal compressArray
                move $a1, $v1
                move $s6, $v0
                addi $a2, $a2, 1
        j compress
        endcomp:
                          
move $ra, $s5
                
                lw $s6, 0($sp)
                lw $s5, 4($sp)
                addi $sp, $sp, 8        
        
jr $ra